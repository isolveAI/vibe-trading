# Cloud Build configuration for Vibe Trading AI Agent
# Deploys the MCP server to Cloud Run via CI/CD

steps:
  # Step 1: Enable required Google Cloud APIs
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üîß Enabling required Google Cloud APIs..."
        
        # List of required APIs
        APIS=(
          "run.googleapis.com"
          "cloudbuild.googleapis.com"
          "artifactregistry.googleapis.com"
          "compute.googleapis.com"
          "aiplatform.googleapis.com"
          "storage.googleapis.com"
          "cloudtrace.googleapis.com"
        )
        
        # Enable APIs
        for API in "$${APIS[@]}"; do
          echo "Enabling $${API}..."
          gcloud services enable "$${API}" --project=${_PROJECT_ID} || echo "API $${API} may already be enabled"
        done
        
        echo "‚úÖ All required APIs enabled"

  # Step 2: Create Artifact Registry repository if it doesn't exist
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üèóÔ∏è Setting up Artifact Registry repository..."
        
        REPO_NAME="${_SERVICE_NAME}-repo"
        
        # Check if repository exists, create if not
        if ! gcloud artifacts repositories describe "$${REPO_NAME}" \
          --location=${_REGION} \
          --project=${_PROJECT_ID} >/dev/null 2>&1; then
          
          echo "Creating Artifact Registry repository: $${REPO_NAME}"
          gcloud artifacts repositories create "$${REPO_NAME}" \
            --repository-format=docker \
            --location=${_REGION} \
            --project=${_PROJECT_ID} \
            --description="Docker repository for ${_SERVICE_NAME}"
        else
          echo "Repository $${REPO_NAME} already exists"
        fi
        
        echo "‚úÖ Artifact Registry repository ready"

  # Step 3: Create storage bucket for artifacts if it doesn't exist
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "ü™£ Setting up storage bucket..."
        
        # Artifact bucket
        ARTIFACT_BUCKET="${_SERVICE_NAME}-artifacts"
        if ! gsutil ls -b "gs://$${ARTIFACT_BUCKET}" >/dev/null 2>&1; then
          echo "Creating artifact bucket: gs://$${ARTIFACT_BUCKET}"
          gsutil mb -p ${_PROJECT_ID} -l ${_REGION} "gs://$${ARTIFACT_BUCKET}"
        else
          echo "Artifact bucket gs://$${ARTIFACT_BUCKET} already exists"
        fi
        
        echo "‚úÖ Storage bucket ready"

  # Step 4: Set up IAM permissions
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üîê Setting up IAM permissions..."
        
        # Get project number and service account
        PROJECT_NUMBER=$$(gcloud projects describe ${_PROJECT_ID} --format="value(projectNumber)")
        SERVICE_ACCOUNT="$${PROJECT_NUMBER}-compute@developer.gserviceaccount.com"
        
        # Required roles
        ROLES=(
          "roles/storage.objectAdmin"
          "roles/artifactregistry.writer"
          "roles/aiplatform.user"
          "roles/cloudtrace.agent"
        )
        
        # Grant roles
        for ROLE in "$${ROLES[@]}"; do
          echo "Granting role: $${ROLE}"
          gcloud projects add-iam-policy-binding ${_PROJECT_ID} \
            --member="serviceAccount:$${SERVICE_ACCOUNT}" \
            --role="$${ROLE}" \
            --quiet || echo "Role $${ROLE} may already be assigned"
        done
        
        echo "‚úÖ IAM permissions configured"

  # Step 5: Build and push Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_SERVICE_NAME}-repo/${_SERVICE_NAME}:${SHORT_SHA}'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_SERVICE_NAME}-repo/${_SERVICE_NAME}:latest'
      - '.'
    dir: 'vibe-trading'

  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_SERVICE_NAME}-repo/${_SERVICE_NAME}:${SHORT_SHA}'

  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_SERVICE_NAME}-repo/${_SERVICE_NAME}:latest'

  # Step 6: Deploy to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "‚òÅÔ∏è Deploying Vibe Trading AI Agent to Cloud Run..."
        
        # Deploy to Cloud Run
        gcloud run deploy ${_SERVICE_NAME} \
          --image=${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_SERVICE_NAME}-repo/${_SERVICE_NAME}:${SHORT_SHA} \
          --region=${_REGION} \
          --project=${_PROJECT_ID} \
          --platform=managed \
          --allow-unauthenticated \
          --port=8080 \
          --memory=4Gi \
          --cpu=2 \
          --max-instances=10 \
          --min-instances=0 \
          --timeout=900 \
          --concurrency=1 \
          --set-env-vars="GOOGLE_CLOUD_PROJECT=${_PROJECT_ID},GOOGLE_CLOUD_LOCATION=${_REGION},NODE_ENV=production" \
          --set-env-vars="GEMINI_API_KEY=${_GEMINI_API_KEY}" \
          --set-env-vars="PLUSE_API_KEY=${_PLUSE_API_KEY}"
        
        echo "‚úÖ Cloud Run deployment complete"
        
        # Get service URL
        SERVICE_URL=$$(gcloud run services describe ${_SERVICE_NAME} \
          --region=${_REGION} \
          --project=${_PROJECT_ID} \
          --format="value(status.url)")
        
        echo "üåê Service URL: $${SERVICE_URL}"
        echo ""
        echo "üìã API Endpoints:"
        echo "  Health Check: $${SERVICE_URL}/health"
        echo "  Stock Analysis: $${SERVICE_URL}/analyze"
        echo ""
        echo "üìù Example Usage:"
        echo "  curl -X POST $${SERVICE_URL}/analyze \\"
        echo "    -H 'Content-Type: application/json' \\"
        echo "    -d '{\"ticker\": \"AAPL\"}'"

# Substitution variables
substitutions:
  _PROJECT_ID: 'your-gcp-project-id'  # Set this in Cloud Build trigger
  _REGION: 'us-central1'
  _SERVICE_NAME: 'vibe-trading-agent'
  _GEMINI_API_KEY: ''  # Set this in Cloud Build trigger or Secret Manager
  _PLUSE_API_KEY: ''   # Set this in Cloud Build trigger or Secret Manager

# Build options
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'  # Use high CPU for faster builds
  diskSizeGb: 100
  env:
    - 'DOCKER_BUILDKIT=1'  # Enable BuildKit for faster builds

# Timeout
timeout: '1200s'  # 20 minutes

# Images to store in registry
images:
  - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_SERVICE_NAME}-repo/${_SERVICE_NAME}:${SHORT_SHA}'
  - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_SERVICE_NAME}-repo/${_SERVICE_NAME}:latest'
